Index: .idea/bug.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/bug.iml	(date 1521353689074)
+++ .idea/bug.iml	(date 1521353689074)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="TestRunnerService">
+    <option name="PROJECT_TEST_RUNNER" value="Unittests" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1521353664917)
+++ .idea/misc.xml	(date 1521353664917)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.6" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1521353664932)
+++ .idea/modules.xml	(date 1521353664932)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/bug.iml" filepath="$PROJECT_DIR$/.idea/bug.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1521355065165)
+++ .idea/vcs.xml	(date 1521355065165)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: bug.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bug.py	(date 1521354841205)
+++ bug.py	(date 1521354841205)
@@ -0,0 +1,220 @@
+#!/usr/bin/python
+# -*- coding: UTF-8 -*-
+
+from flask import Flask,request,Response
+from flask import send_file
+import matplotlib
+matplotlib.use('Agg')
+import matplotlib.pyplot as plt
+import numpy as np
+import requests
+import http.client
+import json
+import MySQLdb
+import socket
+import fcntl
+import struct
+from bson import json_util
+import json
+
+
+BUGZILLA_DATABASE_HOST = "bz3-db3.eng.vmware.com"
+BUGZILLA_DATABASE_PORT = 3306
+BUGZILLA_DATABASE_USER ="mts"
+BUGZILLA_DATABASE_PW="mts"
+BUGZILLA_DATABASE_DATABASE="bugzilla"
+
+def pic_url(component):
+    if component == 'osx':
+        return 'pic1'
+    else:
+        return 'pic2'
+
+def bug_color(priority):
+    if priority == 'P0':
+        return '#990033'
+    elif priority == 'P1':
+        return '#FF0033'
+    else:
+        return '#FFFFF'
+
+def substr(string):
+    if len(string) > 60:
+        return string[0:59]+'...'
+    else:
+        return string
+
+##test method for debug or search sth
+def test():
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+
+    cursor = bzdb_conn.cursor()
+
+    #sql = """select bug_id, priority, bug_severity, short_desc from bugs where found_in_product_id='18' and found_in_version_id='4926' ORDER BY priority"""
+    #sql = """select COLUMN_NAME from information_schema.COLUMNS where table_name = 'bugs_activity'""";
+    #sql = """select * from bugs_activity where bug_id='1997211'"""
+    sql = """select * from bugs where bug_id="1997211" ORDER BY priority"""
+    #sql = """select * from groups"""
+    #sql = """select reporter,count(reporter) from bugs where found_in_version_id="CART18FQ4" group by reporter order by reporter"""
+    #sql = """select COLUMN_NAME from COLUMN_NAME from information_schema.COLUMNS where table_name = 'profiles'""";
+    #sql = """select userid from profiles where login_name='zhaom'""";
+    #sql = """select COLUMN_NAME from information_schema.COLUMNS where table_name = 'categories'""";
+    #sql = """select * from categories where name= 'L10n Server'""";
+    #sql = """select * from categories where name= 'Documentation' and product_id = '18'""" ;
+    #sql = """select * from products where name= 'vdi'""";
+    #sql = """select * from bug_severity where name= 'Critical'""";
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    print(result)
+
+#Count bug by reporter
+def count_by_person(foundin_id, phaselist):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    print(phaselist)
+    if len(phaselist)>1:
+        sql = """select login_name,count(reporter) from bugs,profiles where bugs.reporter = profiles.userid  and bugs.found_in_version_id= '{0}' and bugs.found_in_phase_id in {1} group by bugs.reporter""".format(foundin_id, phaselist)
+    else:
+        sql = """select login_name,count(reporter) from bugs,profiles where bugs.reporter = profiles.userid  and bugs.found_in_version_id= '{0}' and bugs.found_in_phase_id= '{1}' group by bugs.reporter""".format(foundin_id, phaselist[0])
+    cursor.execute(sql)
+    bug_foundin = cursor.fetchall()
+    result_json=json.dumps(bug_foundin)
+    return result_json
+
+def count_by_person_allphase(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    sql = """select login_name,count(reporter) from bugs,profiles where bugs.reporter = profiles.userid  and bugs.found_in_version_id= '{0}' group by bugs.reporter""".format(foundin_id)
+    cursor.execute(sql)
+    bug_foundin = cursor.fetchall()
+    result_json=json.dumps(bug_foundin)
+    return result_json
+
+def bug_cycle(bug_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    sql = """select * from bugs_activity where bug_id='{0}'""".format(bug_id)
+    cursor.execute(sql)
+    update = cursor.fetchall()
+    result_json=json.dumps(update,default=json_util.default)
+    return result_json
+
+#get foundin ID
+def getFoundin(foundin_name):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    sql = """select id from versions where name= '{0}' """.format(foundin_name)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json = json.dumps(result)
+    print(result_json)
+    array = json.loads(result_json)
+    return array[0][0]
+
+# get foundin phase
+def getFoundinPhase(foundin_id, foundin_phase):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    print(foundin_phase)
+    if len(foundin_phase)>1:
+        sql = """select id from phases where name in {0} and  version_id = '{1}' """.format(foundin_phase, foundin_id)
+    else: 
+        sql = """select id from phases where name = '{0}' and  version_id = '{1}' """.format(foundin_phase[0], foundin_id)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json = json.dumps(result)
+    array = json.loads(result_json)
+    phaselist = []
+    for element in array:
+        phaselist.append(element[0])
+    for item in foundin_phase:
+        if item == '': 
+            phaselist.append('')
+            break
+    phaselist1 = tuple(phaselist)
+    return phaselist1
+
+def getCountbyPhase(foundin_id, foundin_phase):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    print(foundin_phase)
+    i18nbug = ('1800', '1742', '2451' , '736')
+    if len(foundin_phase)>1:
+        sql = """select count(*) from bugs where found_in_phase_id in {0} and  found_in_version_id = '{1}' and product_id = '18' and category_id not in {2}""".format(foundin_phase, foundin_id, i18nbug)
+    else: 
+        sql = """select count(*)  from bugs where found_in_phase_id = '{0}' and  found_in_version_id = '{1}' and product_id = '18' and category_id not in {2}""".format(foundin_phase[0], foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    return result
+
+def getBugbyDate(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    zdb_conn = MySQLdb.connect(host="bz3-db3.eng.vmware.com", port=3306, user="mts", passwd="mts", db="bugzilla")
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    # includes ('L10n Feature Pack', 'L10n Remote Client', 'L10n Server' 'Documentation')
+    sql = """select creation_ts, bug_id from bugs where found_in_version_id = '{0}' and product_id = '18' and category_id not in {1} and cf_type = 'Defect'""".format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+def getRegressionBug(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    sql = """select creation_ts, bug_id,cf_regression from bugs where found_in_version_id = '{0}' and product_id = '18' and category_id not in {1} and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%' and cf_regression = 'Yes'""".format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+def getBugbyDateforTeam(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    #sql = """select login_name, creation_ts, bug_id, short_desc from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}  and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%'""".format(foundin_id, i18nbug)
+    #sql = """select login_name, creation_ts, bug_id from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}  and bug_severity in ('critical', 'catastrophic') and priority in ('P0', 'P1') and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%'""".format(foundin_id, i18nbug)
+    #sql = """select login_name, creation_ts, bug_id from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}  and priority in ('P2', 'P3', 'P4', '---') and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%'""".format(foundin_id, i18nbug)
+    sql = """select login_name, creation_ts, bug_id from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}  and bug_severity in ('serious', 'minor', 'cosmetic') and priority in ('P0', 'P1') and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%'""".format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+
+def getBugbyDateforReportTeam(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    sql = """select login_name, creation_ts, bug_id from bugs, profiles where bugs.reporter = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}""".format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+def getAllAssignee(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    sql = """select login_name from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1} and bug_severity in ('critical', 'catastrophic') """.format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result)
+    return result_json
+
+def getBugbyDateandPro(foundin_id, severity):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    zdb_conn = MySQLdb.connect(host="bz3-db3.eng.vmware.com", port=3306, user="mts", passwd="mts", db="bugzilla")
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    sql = """select creation_ts, bug_id from bugs where found_in_version_id = '{0}' and product_id = '18' and category_id not in {1} and bug_severity = '{2}'""".format(foundin_id, i18nbug, severity)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+if __name__ == "__main__":
+    print ('This is main of module "bug.py"')
+    test()
+    #getBugbyDateforTeam('4926')
Index: bug.py.bak
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bug.py.bak	(date 1521353848589)
+++ bug.py.bak	(date 1521353848589)
@@ -0,0 +1,220 @@
+#!/usr/bin/python
+# -*- coding: UTF-8 -*-
+
+from flask import Flask,request,Response
+from flask import send_file
+import matplotlib
+matplotlib.use('Agg')
+import matplotlib.pyplot as plt
+import numpy as np
+import requests
+import httplib
+import json
+import MySQLdb
+import socket
+import fcntl
+import struct
+from bson import json_util
+import json
+
+
+BUGZILLA_DATABASE_HOST = "bz3-db3.eng.vmware.com"
+BUGZILLA_DATABASE_PORT = 3306
+BUGZILLA_DATABASE_USER ="mts"
+BUGZILLA_DATABASE_PW="mts"
+BUGZILLA_DATABASE_DATABASE="bugzilla"
+
+def pic_url(component):
+    if component == 'osx':
+        return 'pic1'
+    else:
+        return 'pic2'
+
+def bug_color(priority):
+    if priority == 'P0':
+        return '#990033'
+    elif priority == 'P1':
+        return '#FF0033'
+    else:
+        return '#FFFFF'
+
+def substr(string):
+    if len(string) > 60:
+        return string[0:59]+'...'
+    else:
+        return string
+
+##test method for debug or search sth
+def test():
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+
+    cursor = bzdb_conn.cursor()
+
+    #sql = """select bug_id, priority, bug_severity, short_desc from bugs where found_in_product_id='18' and found_in_version_id='4926' ORDER BY priority"""
+    #sql = """select COLUMN_NAME from information_schema.COLUMNS where table_name = 'bugs_activity'""";
+    #sql = """select * from bugs_activity where bug_id='1997211'"""
+    sql = """select * from bugs where bug_id="1997211" ORDER BY priority"""
+    #sql = """select * from groups"""
+    #sql = """select reporter,count(reporter) from bugs where found_in_version_id="CART18FQ4" group by reporter order by reporter"""
+    #sql = """select COLUMN_NAME from COLUMN_NAME from information_schema.COLUMNS where table_name = 'profiles'""";
+    #sql = """select userid from profiles where login_name='zhaom'""";
+    #sql = """select COLUMN_NAME from information_schema.COLUMNS where table_name = 'categories'""";
+    #sql = """select * from categories where name= 'L10n Server'""";
+    #sql = """select * from categories where name= 'Documentation' and product_id = '18'""" ;
+    #sql = """select * from products where name= 'vdi'""";
+    #sql = """select * from bug_severity where name= 'Critical'""";
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    print result
+
+#Count bug by reporter
+def count_by_person(foundin_id, phaselist):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    print phaselist
+    if len(phaselist)>1:
+        sql = """select login_name,count(reporter) from bugs,profiles where bugs.reporter = profiles.userid  and bugs.found_in_version_id= '{0}' and bugs.found_in_phase_id in {1} group by bugs.reporter""".format(foundin_id, phaselist)
+    else:
+        sql = """select login_name,count(reporter) from bugs,profiles where bugs.reporter = profiles.userid  and bugs.found_in_version_id= '{0}' and bugs.found_in_phase_id= '{1}' group by bugs.reporter""".format(foundin_id, phaselist[0])
+    cursor.execute(sql)
+    bug_foundin = cursor.fetchall()
+    result_json=json.dumps(bug_foundin)
+    return result_json
+
+def count_by_person_allphase(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    sql = """select login_name,count(reporter) from bugs,profiles where bugs.reporter = profiles.userid  and bugs.found_in_version_id= '{0}' group by bugs.reporter""".format(foundin_id)
+    cursor.execute(sql)
+    bug_foundin = cursor.fetchall()
+    result_json=json.dumps(bug_foundin)
+    return result_json
+
+def bug_cycle(bug_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    sql = """select * from bugs_activity where bug_id='{0}'""".format(bug_id)
+    cursor.execute(sql)
+    update = cursor.fetchall()
+    result_json=json.dumps(update,default=json_util.default)
+    return result_json
+
+#get foundin ID
+def getFoundin(foundin_name):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    sql = """select id from versions where name= '{0}' """.format(foundin_name)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json = json.dumps(result)
+    print result_json
+    array = json.loads(result_json)
+    return array[0][0]
+
+# get foundin phase
+def getFoundinPhase(foundin_id, foundin_phase):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    print foundin_phase
+    if len(foundin_phase)>1:
+        sql = """select id from phases where name in {0} and  version_id = '{1}' """.format(foundin_phase, foundin_id)
+    else: 
+        sql = """select id from phases where name = '{0}' and  version_id = '{1}' """.format(foundin_phase[0], foundin_id)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json = json.dumps(result)
+    array = json.loads(result_json)
+    phaselist = []
+    for element in array:
+        phaselist.append(element[0])
+    for item in foundin_phase:
+        if item == '': 
+            phaselist.append('')
+            break
+    phaselist1 = tuple(phaselist)
+    return phaselist1
+
+def getCountbyPhase(foundin_id, foundin_phase):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    print foundin_phase
+    i18nbug = ('1800', '1742', '2451' , '736')
+    if len(foundin_phase)>1:
+        sql = """select count(*) from bugs where found_in_phase_id in {0} and  found_in_version_id = '{1}' and product_id = '18' and category_id not in {2}""".format(foundin_phase, foundin_id, i18nbug)
+    else: 
+        sql = """select count(*)  from bugs where found_in_phase_id = '{0}' and  found_in_version_id = '{1}' and product_id = '18' and category_id not in {2}""".format(foundin_phase[0], foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    return result
+
+def getBugbyDate(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    zdb_conn = MySQLdb.connect(host="bz3-db3.eng.vmware.com", port=3306, user="mts", passwd="mts", db="bugzilla")
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    # includes ('L10n Feature Pack', 'L10n Remote Client', 'L10n Server' 'Documentation')
+    sql = """select creation_ts, bug_id from bugs where found_in_version_id = '{0}' and product_id = '18' and category_id not in {1} and cf_type = 'Defect'""".format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+def getRegressionBug(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    sql = """select creation_ts, bug_id,cf_regression from bugs where found_in_version_id = '{0}' and product_id = '18' and category_id not in {1} and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%' and cf_regression = 'Yes'""".format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+def getBugbyDateforTeam(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    #sql = """select login_name, creation_ts, bug_id, short_desc from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}  and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%'""".format(foundin_id, i18nbug)
+    #sql = """select login_name, creation_ts, bug_id from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}  and bug_severity in ('critical', 'catastrophic') and priority in ('P0', 'P1') and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%'""".format(foundin_id, i18nbug)
+    #sql = """select login_name, creation_ts, bug_id from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}  and priority in ('P2', 'P3', 'P4', '---') and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%'""".format(foundin_id, i18nbug)
+    sql = """select login_name, creation_ts, bug_id from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}  and bug_severity in ('serious', 'minor', 'cosmetic') and priority in ('P0', 'P1') and cf_type = 'Defect' and short_desc NOT LIKE '%[i18N%'""".format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+
+def getBugbyDateforReportTeam(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    sql = """select login_name, creation_ts, bug_id from bugs, profiles where bugs.reporter = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1}""".format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+def getAllAssignee(foundin_id):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    sql = """select login_name from bugs, profiles where bugs.assigned_to = profiles.userid and found_in_version_id = '{0}' and product_id = '18' and category_id not in {1} and bug_severity in ('critical', 'catastrophic') """.format(foundin_id, i18nbug)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result)
+    return result_json
+
+def getBugbyDateandPro(foundin_id, severity):
+    bzdb_conn = MySQLdb.connect(host=BUGZILLA_DATABASE_HOST, port=BUGZILLA_DATABASE_PORT, user=BUGZILLA_DATABASE_USER, passwd=BUGZILLA_DATABASE_PW, db=BUGZILLA_DATABASE_DATABASE)
+    zdb_conn = MySQLdb.connect(host="bz3-db3.eng.vmware.com", port=3306, user="mts", passwd="mts", db="bugzilla")
+    cursor = bzdb_conn.cursor()
+    i18nbug = ('2451', '1800','1742', '736')
+    sql = """select creation_ts, bug_id from bugs where found_in_version_id = '{0}' and product_id = '18' and category_id not in {1} and bug_severity = '{2}'""".format(foundin_id, i18nbug, severity)
+    cursor.execute(sql)
+    result= cursor.fetchall()
+    result_json=json.dumps(result,default=json_util.default)
+    return result_json
+
+if __name__ == "__main__":
+    print ('This is main of module "bug.py"')
+    test()
+    #getBugbyDateforTeam('4926')
Index: bugInfo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bugInfo.py	(date 1521353900638)
+++ bugInfo.py	(date 1521353900638)
@@ -0,0 +1,9 @@
+#!/usr/bin/python
+# -*- coding: UTF-8 -*-
+
+class bugInfo:
+    """A simple example class"""
+    def __init__(self, bug_id, create_time, priority):
+        self.bug_id = bug_id
+        self.create_time = create_time
+        self.priority = priority
\ No newline at end of file
Index: getDate.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- getDate.py	(date 1521354986636)
+++ getDate.py	(date 1521354986636)
@@ -0,0 +1,217 @@
+#!/usr/bin/python
+# -*- coding: UTF-8 -*-
+import bug
+import json
+from bugInfo import bugInfo
+import time
+import datetime
+import xlsxwriter
+import os.path
+import pytz
+
+import numpy as np
+import pandas as pd
+
+BJTeam = ['baochenw', 'weiy', 'shuhuawang', 'agong', 'jinxingh', 'hongshengl', 'myuan', 'luliu', 'jhuo', 'rxing',
+          'yyu1', 'wenshuoc', 'dengy', 'jingy',
+          'nge', 'songlil', 'linz', 'smangui', 'bnie', 'gsi', 'xinyangl', 'xwei', 'yanx', 'tzhao', 'vzheng', 'yuez',
+          'hek', 'zhaoli', 'bliu', 'jjliu', 'boliu', 'menx', 'qsun', 'dongw', 'wangxiao', 'wyattx', 'yuanmengx',
+          'dongyuz', 'baic', 'hbai', 'pguo', 'shou', 'lihuang', 'zji', 'guoxin', 'qinz', 'ziaoy', 'wenyuzhao', 'zzhou',
+          'anh', 'wbai', 'chenyu', 'tjia', 'lkong', 'huangl', 'mlu', 'renz', 'ksong', 'songyu', 'xiaoyux', 'wyang',
+          'yun', 'chaoz', 'leviz',
+          'lxclient-bj-dev', 'yhui', 'view-osx', 'wincdk_guru', 'view-android', 'linali', 'zhaom', 'view-clients-guru',
+          'zhiminl', 'yyun',
+          'view-ios', 'oye', 'pcoip', 'fyan', 'amzhang', 'boshil', 'kkong', 'ltim', 'pewang', 'qhuang', 'shik', 'zlin',
+          'yanh', 'jjzhang',
+          'scheng', 'rli', 'txiong', 'cn-dev-vc-win', 'lxclient-bj-dev', 'view-triage', 'yuetingz']
+
+
+# KenTeam = ['ysan', 'ltim', 'boshil', 'zlin', 'ljack', 'xinshul', 'swan', 'llv', 'scheng', 'youx', 'jsong','zhoujing']
+
+# test method
+def createbuglist():
+    foundin_id = bug.getBugbyDate('4926')
+    array = json.loads(foundin_id)
+    bugs = []
+    for element in array:
+        date = datetime.datetime.fromtimestamp(element[0].get('$date') / 1e3).date()
+        buginfo = bugInfo(element[1], date, "")
+        bugs.append(buginfo)
+
+def getdatelist(foundin):
+    foundin_id = bug.getFoundin(foundin)
+    result = bug.getRegressionBug(foundin_id)
+    return resultclean(result)
+
+
+def getRegression(foundin, filename):
+    foundin_id = bug.getFoundin(foundin)
+    result = bug.getRegressionBug(foundin_id)
+    datelist = resultclean(result)
+    count(datelist, filename)
+
+
+def getdatelist2(foundin, severity):
+    foundin_id = bug.getFoundin(foundin)
+    result = bug.getBugbyDateandPro(foundin_id, severity)
+    return resultclean(result)
+
+
+# change data format
+def resultclean(result):
+    array = json.loads(result)
+    datelist = []
+    for element in array:
+        tz = pytz.timezone('US/Pacific')
+        date = datetime.datetime.fromtimestamp(element[0].get('$date') / 1e3, pytz.utc).date()
+        datelist.append(date)
+    return datelist
+
+
+def getassigneelist(foundin):
+    foundin_id = bug.getFoundin(foundin)
+    result = bug.getAllAssignee(foundin_id)
+    array = json.loads(result)
+    assigneelist = []
+    datelist = []
+    for element in array:
+        assigneelist.append(element[0])
+    dateset = set(assigneelist)
+    for element in dateset:
+        print(element)
+        count = assigneelist.count(element)
+        print(count)
+        datelist.append(count)
+    filename = "assignee_q1.xlsx"
+    writetofile(filename, dateset, datelist, 'No')
+
+
+def getBugbyDateforTeam(foundin, filename1, filename2):
+    foundin_id = bug.getFoundin(foundin)
+    result = bug.getBugbyDateforTeam(foundin_id)
+    array = json.loads(result)
+    BJBugs = []
+    PABugs = []
+    for element in array:
+        tz = pytz.timezone('US/Pacific')
+        date = datetime.datetime.fromtimestamp(element[1].get('$date') / 1e3, pytz.utc).date()
+        print(element[2])
+        print(date)
+        if element[0] in BJTeam:
+            BJBugs.append(date)
+        else:
+            PABugs.append(date)
+    count(BJBugs, filename1)
+    count(PABugs, filename2)
+
+
+def getBugbyDateforKenTeam(foundin, filename1):
+    foundin_id = bug.getFoundin(foundin)
+    result = bug.getBugbyDateforReportTeam(foundin_id)
+    array = json.loads(result)
+    KenTeamBugs = []
+    for element in array:
+        tz = pytz.timezone('US/Pacific')
+        date = datetime.datetime.fromtimestamp(element[1].get('$date') / 1e3, pytz.utc).date()
+        if element[0] in KenTeam:
+            KenTeamBugs.append(date)
+            print(element[2])
+            print(date)
+    print(KenTeamBugs)
+    count(KenTeamBugs, 'kenbug.xlsx')
+
+
+def count(datelist, filename):
+    dateset = set(datelist)
+    datesub = list(dateset)
+    datesub.sort()
+    datacount = []
+    for element in datesub:
+        count = datelist.count(element)
+        datacount.append(count)
+    writetofile(filename, datesub, datacount, 'No')
+
+
+def calculatebyDate(foundin, filename, severity='all'):
+    if severity is 'all':
+        datelist = getdatelist(foundin)
+        print(datelist)
+    else:
+        datelist = getdatelist2(foundin, severity)
+    count(datelist, filename);
+
+
+def writetofile(excel_name='bugcount.xlsx', data1=[], data2=[], line_chart='Yes'):
+    workbook = xlsxwriter.Workbook(excel_name)
+    worksheet = workbook.add_worksheet('sheet1')
+    workbook.add_format({'bold': True})
+    title = ['Time', 'Count']
+    top = workbook.add_format({'border': 6, 'align': 'center', 'bg_color': 'cccccc', 'font_size': 13, 'bold': True})
+    format = workbook.add_format({'num_format': 'dd/mm/yy'})
+    worksheet.set_column('A:B', 15)
+    worksheet.write_row('A1', title, top)
+    worksheet.write_column('A2', data1, format)
+    worksheet.write_column('B2', data2)
+    if line_chart is 'Yes' or 'yes':
+        chart = workbook.add_chart({'type': 'line'})
+        chart.set_title({'name': 'Bug per date'})
+        chart.add_series({'categories': 'sheet1!$A$2:$A$' + str(len(data2) + 8),
+                          'values': 'sheet1!$B$2:$B$' + str(len(data2) + 8),
+                          })
+        chart.set_size({'width': 800, 'height': 500})
+        chart.set_x_axis({'name': 'Date'})
+        chart.set_y_axis({'name': 'Number'})
+        chart.set_style(33)
+        worksheet.insert_chart('D3', chart)
+    workbook.close()
+
+
+def analyze(infilename, outfilename):
+    weeklist = []
+    weekcount = []
+    originaldata = pd.DataFrame(pd.read_excel(infilename))
+    originaldata = originaldata.set_index('Time')
+    test = originaldata.resample('W', how=sum).fillna(0)
+    for column in test.columns:
+        for idx in test[column].index:
+            x = test.get_value(idx, column)
+            weeklist.append(idx)
+            weekcount.append(x)
+    writetofile(outfilename, weeklist, weekcount, 'Yes')
+
+
+if __name__ == "__main__":
+    print('This is main of module "getDate.py"')
+    getRegression('CART18FQ4', '18fq4_regression.xlsx')
+    getRegression('CART18FQ3', '18fq3_regression.xlsx')
+    getRegression('Cart17Q2', '18fq2_regression.xlsx')
+    # getBugbyDateforKenTeam('CART18FQ4', '18fq4_ken.xlsx')
+    # analyze('18fq4_ken.xlsx', 'analyze_18fq4_ken.xlsx')
+    # getassigneelist('Cart17Q1')
+    # getBugbyDateforTeam('Cart17Q1', '18fq1_bj_defect_min.xlsx', '18fq1_pa_defect_min.xlsx')
+    # getBugbyDateforTeam('Cart17Q2', '18fq2_bj_defect_ser.xlsx', '18fq2_pa_defect_ser.xlsx')
+    # getBugbyDateforTeam('CART18FQ3', '18fq3_bj_defect_ser.xlsx', '18fq3_pa_defect_ser.xlsx')
+    # getBugbyDateforTeam('CART18FQ4', '18fq4_bj_defect_min.xlsx', '18fq4_pa_defect_min.xlsx')
+    # getBugbyDateforTeam('Cart17Q1', '18fq1_bj_Defect.xlsx', '18fq1_pa_Defect.xlsx')
+    # analyze('18fq1_bj_Defect.xlsx', 'analyze_q1_bj_Defect.xlsx')
+    # analyze('18fq1_pa_Defect.xlsx', 'analyze_q1_pa_Defect.xlsx')
+    # getBugbyDateforTeam('CART18FQ4', '18fq4_bj_Defect.xlsx', '18fq4_pa_Defect.xlsx')
+    # analyze('18fq4_bj_Defect.xlsx', 'analyze_q4_bj_Defect.xlsx')
+    # analyze('18fq4_pa_Defect.xlsx', 'analyze_q4_pa_Defect.xlsx')
+    # getBugbyDateforTeam('Cart17Q2', '18fq2_bj_Defect.xlsx', '18fq2_pa_Defect.xlsx')
+    # analyze('18fq2_bj_Defect.xlsx', 'analyze_q2_bj_Defect.xlsx')
+    # analyze('18fq2_pa_Defect.xlsx', 'analyze_q2_pa_Defect.xlsx')
+    # getBugbyDateforTeam('CART18FQ3', '18fq3_bj_Defect.xlsx', '18fq3_pa_Defect.xlsx')
+    # analyze('18fq3_bj_Defect.xlsx', 'analyze_q3_bj_Defect.xlsx')
+    # analyze('18fq3_pa_Defect.xlsx', 'analyze_q3_pa_Defect.xlsx')
+    # createbuglist()
+    # calculatebyDate('CART18FQ4', 'bugcount_q4_Defect.xlsx')
+    # analyze('bugcount_q4_Defect.xlsx', 'analyze_q4_Defect.xlsx')
+    # calculatebyDate('CART18FQ3', 'bugcount_q3_Defect.xlsx')
+    # analyze('bugcount_q3_Defect.xlsx', 'analyze_q3_Defect.xlsx')
+    # calculatebyDate('Cart17Q1', 'bugcount_q1_Defect.xlsx')
+    # analyze('bugcount_q1_Defect.xlsx', 'analyze_q1_Defect.xlsx')
+    # calculatebyDate('Cart17Q2', 'bugcount_q2_Defect.xlsx')
+    # analyze('bugcount_q2_Defect.xlsx', 'analyze_q2_Defect.xlsx')
+
+    
Index: getDate.py.bak
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- getDate.py.bak	(date 1521353850354)
+++ getDate.py.bak	(date 1521353850354)
@@ -0,0 +1,201 @@
+#!/usr/bin/python
+# -*- coding: UTF-8 -*-
+import bug
+import json
+from bugInfo import bugInfo
+import time
+import datetime
+import xlsxwriter
+import os.path
+import pytz
+
+import numpy as np
+import pandas as pd
+
+BJTeam = ['baochenw','weiy','shuhuawang','agong','jinxingh','hongshengl','myuan','luliu', 'jhuo','rxing','yyu1','wenshuoc','dengy','jingy',
+ 'nge', 'songlil','linz','smangui','bnie','gsi','xinyangl','xwei','yanx','tzhao','vzheng','yuez',
+ 'hek','zhaoli','bliu','jjliu','boliu','menx','qsun','dongw','wangxiao','wyattx','yuanmengx',
+ 'dongyuz', 'baic','hbai','pguo','shou','lihuang', 'zji', 'guoxin', 'qinz', 'ziaoy', 'wenyuzhao', 'zzhou',
+ 'anh','wbai','chenyu','tjia','lkong','huangl','mlu','renz','ksong','songyu','xiaoyux','wyang', 'yun', 'chaoz', 'leviz',
+ 'lxclient-bj-dev','yhui', 'view-osx', 'wincdk_guru', 'view-android','linali','zhaom', 'view-clients-guru','zhiminl', 'yyun',
+ 'view-ios', 'oye', 'pcoip','fyan', 'amzhang', 'boshil', 'kkong', 'ltim', 'pewang', 'qhuang','shik', 'zlin', 'yanh', 'jjzhang',
+  'scheng','rli', 'txiong', 'cn-dev-vc-win','lxclient-bj-dev', 'view-triage', 'yuetingz']
+
+#KenTeam = ['ysan', 'ltim', 'boshil', 'zlin', 'ljack', 'xinshul', 'swan', 'llv', 'scheng', 'youx', 'jsong','zhoujing']
+
+#test method
+def createbuglist():
+	foundin_id = bug.getBugbyDate('4926')
+	array = json.loads(foundin_id)
+	bugs = []
+	for element in array:
+		date = datetime.datetime.fromtimestamp(element[0].get('$date') / 1e3).date()
+		buginfo = bugInfo(element[1], date, "")
+        bugs.append(buginfo)
+
+def getdatelist(foundin):
+	foundin_id = bug.getFoundin(foundin)
+	result = bug.getRegressionBug(foundin_id)
+	return resultclean(result)
+
+def getRegression(foundin, filename):
+	foundin_id = bug.getFoundin(foundin)
+	result = bug.getRegressionBug(foundin_id)
+	datelist = resultclean(result)
+	count(datelist, filename);
+
+def getdatelist2(foundin, severity):
+	foundin_id = bug.getFoundin(foundin)
+	result = bug.getBugbyDateandPro(foundin_id, severity)
+	return resultclean(result)
+
+# change data format
+def resultclean(result):
+	array = json.loads(result)
+	datelist = []
+	for element in array:
+		tz  = pytz.timezone('US/Pacific')
+		date = datetime.datetime.fromtimestamp(element[0].get('$date') / 1e3, pytz.utc).date()
+                datelist.append(date)
+        return datelist
+
+def getassigneelist(foundin):
+	foundin_id = bug.getFoundin(foundin)
+	result = bug.getAllAssignee(foundin_id)
+	array = json.loads(result)
+	assigneelist = []
+	datelist = []
+	for element in array:
+		assigneelist.append(element[0])
+        dateset = set(assigneelist)
+        for element in dateset:
+    	    print element
+            count = assigneelist.count(element)
+            print count
+            datelist.append(count)
+        filename = "assignee_q1.xlsx"
+        writetofile(filename, dateset, datelist, 'No')
+
+def getBugbyDateforTeam(foundin, filename1, filename2):
+	foundin_id = bug.getFoundin(foundin)
+	result = bug.getBugbyDateforTeam(foundin_id)
+	array = json.loads(result)
+	BJBugs = []
+	PABugs = []
+	for element in array:
+	    tz  = pytz.timezone('US/Pacific')
+	    date = datetime.datetime.fromtimestamp(element[1].get('$date') / 1e3, pytz.utc).date()
+	    print element[2]
+	    print date
+	    if element[0] in BJTeam:
+                BJBugs.append(date)
+            else:
+        	PABugs.append(date)
+        count(BJBugs, filename1)
+        count(PABugs, filename2)
+
+def getBugbyDateforKenTeam(foundin, filename1):
+	foundin_id = bug.getFoundin(foundin)
+	result = bug.getBugbyDateforReportTeam(foundin_id)
+	array = json.loads(result)
+	KenTeamBugs = []
+	for element in array:
+	    tz  = pytz.timezone('US/Pacific')
+	    date = datetime.datetime.fromtimestamp(element[1].get('$date') / 1e3, pytz.utc).date()
+	    if element[0] in KenTeam:
+                KenTeamBugs.append(date)
+                print element[2]
+                print date
+        print KenTeamBugs
+        count(KenTeamBugs, 'kenbug.xlsx')
+
+def count(datelist, filename):
+    dateset = set(datelist)
+    datesub = list(dateset)
+    datesub.sort()
+    datacount = []
+    for element in datesub:
+	count = datelist.count(element)
+	datacount.append(count)
+    writetofile(filename, datesub, datacount, 'No')
+
+def calculatebyDate(foundin, filename, severity='all'):
+	if severity is 'all':
+		datelist = getdatelist(foundin)
+		print datelist
+	else:
+		datelist = getdatelist2(foundin, severity)
+	count(datelist, filename);
+
+def writetofile(excel_name='bugcount.xlsx', data1=[], data2=[], line_chart='Yes'):
+	workbook = xlsxwriter.Workbook(excel_name)
+	worksheet = workbook.add_worksheet('sheet1')
+	workbook.add_format({'bold': True})
+	title = ['Time', 'Count']
+        top = workbook.add_format({'border': 6,'align': 'center','bg_color': 'cccccc','font_size': 13,'bold': True})
+        format = workbook.add_format({'num_format': 'dd/mm/yy'})
+        worksheet.set_column('A:B', 15)
+        worksheet.write_row('A1', title, top)
+        worksheet.write_column('A2', data1, format)
+        worksheet.write_column('B2', data2)
+        if line_chart is 'Yes' or 'yes':
+            chart=workbook.add_chart({'type':'line'})
+            chart.set_title({'name':u'Bug per date'})
+            chart.add_series({'categories': 'sheet1!$A$2:$A$'+str(len(data2)+8),
+                            'values':'sheet1!$B$2:$B$'+str(len(data2)+8),
+                            })
+            chart.set_size({'width':800,'height':500})
+            chart.set_x_axis({'name': 'Date'})
+            chart.set_y_axis({'name': 'Number'})
+            chart.set_style(33)
+            worksheet.insert_chart('D3',chart)
+        workbook.close()
+
+def analyze(infilename, outfilename):
+	weeklist = []
+	weekcount = []
+	originaldata=pd.DataFrame(pd.read_excel(infilename))
+	originaldata = originaldata.set_index('Time')
+	test = originaldata.resample('W',how=sum).fillna(0)
+	for column in test.columns:
+		for idx in test[column].index:
+			x = test.get_value(idx,column)
+			weeklist.append(idx)
+			weekcount.append(x)
+	writetofile(outfilename, weeklist, weekcount, 'Yes')
+
+if __name__ == "__main__":
+    print ('This is main of module "getDate.py"')
+    getRegression('CART18FQ4', '18fq4_regression.xlsx')
+    getRegression('CART18FQ3', '18fq3_regression.xlsx')
+    getRegression('Cart17Q2', '18fq2_regression.xlsx')
+    #getBugbyDateforKenTeam('CART18FQ4', '18fq4_ken.xlsx')
+    #analyze('18fq4_ken.xlsx', 'analyze_18fq4_ken.xlsx')
+    #getassigneelist('Cart17Q1')
+    #getBugbyDateforTeam('Cart17Q1', '18fq1_bj_defect_min.xlsx', '18fq1_pa_defect_min.xlsx')
+    #getBugbyDateforTeam('Cart17Q2', '18fq2_bj_defect_ser.xlsx', '18fq2_pa_defect_ser.xlsx')
+    #getBugbyDateforTeam('CART18FQ3', '18fq3_bj_defect_ser.xlsx', '18fq3_pa_defect_ser.xlsx')
+    #getBugbyDateforTeam('CART18FQ4', '18fq4_bj_defect_min.xlsx', '18fq4_pa_defect_min.xlsx')
+    #getBugbyDateforTeam('Cart17Q1', '18fq1_bj_Defect.xlsx', '18fq1_pa_Defect.xlsx')
+    #analyze('18fq1_bj_Defect.xlsx', 'analyze_q1_bj_Defect.xlsx')
+    #analyze('18fq1_pa_Defect.xlsx', 'analyze_q1_pa_Defect.xlsx')
+    #getBugbyDateforTeam('CART18FQ4', '18fq4_bj_Defect.xlsx', '18fq4_pa_Defect.xlsx')
+    #analyze('18fq4_bj_Defect.xlsx', 'analyze_q4_bj_Defect.xlsx')
+    #analyze('18fq4_pa_Defect.xlsx', 'analyze_q4_pa_Defect.xlsx')
+    #getBugbyDateforTeam('Cart17Q2', '18fq2_bj_Defect.xlsx', '18fq2_pa_Defect.xlsx')
+    #analyze('18fq2_bj_Defect.xlsx', 'analyze_q2_bj_Defect.xlsx')
+    #analyze('18fq2_pa_Defect.xlsx', 'analyze_q2_pa_Defect.xlsx')
+    #getBugbyDateforTeam('CART18FQ3', '18fq3_bj_Defect.xlsx', '18fq3_pa_Defect.xlsx')
+    #analyze('18fq3_bj_Defect.xlsx', 'analyze_q3_bj_Defect.xlsx')
+    #analyze('18fq3_pa_Defect.xlsx', 'analyze_q3_pa_Defect.xlsx')
+    #createbuglist()
+    #calculatebyDate('CART18FQ4', 'bugcount_q4_Defect.xlsx')
+    #analyze('bugcount_q4_Defect.xlsx', 'analyze_q4_Defect.xlsx')
+    #calculatebyDate('CART18FQ3', 'bugcount_q3_Defect.xlsx')
+    #analyze('bugcount_q3_Defect.xlsx', 'analyze_q3_Defect.xlsx')
+    #calculatebyDate('Cart17Q1', 'bugcount_q1_Defect.xlsx')
+    #analyze('bugcount_q1_Defect.xlsx', 'analyze_q1_Defect.xlsx')
+    #calculatebyDate('Cart17Q2', 'bugcount_q2_Defect.xlsx')
+    #analyze('bugcount_q2_Defect.xlsx', 'analyze_q2_Defect.xlsx')
+
+    
